{"version":3,"sources":["Events.js","colors.js","components/Login.js","components/MessageInput.js","components/MessageBox.js","components/ServerMessage.js","components/ChatContainer.js","components/NavBar.js","components/ToolBar.js","components/WhiteBoard.js","components/Layout.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","GLOBAL_CHAT","USER_CONNECTED","MESSAGE_RECIEVED","MESSAGE_SENT","USER_DISCONNECTED","TYPING","VERIFY_USER","LOGOUT","LINEDRAWN","SCREENCLEAR","LOG","name","hex","Login","props","state","username","error","handleChange","bind","handleSubmit","setUser","user","isUser","this","setError","message","setState","console","log","e","target","value","preventDefault","socket","emit","className","onSubmit","type","placeholder","onChange","Component","MessageInput","sendMessage","input","focus","ref","ele","MessageBox","highlight","includes","style","backgroundColor","sender","ServerMessage","ChatContainer","chatMessages","addMessage","autoScr","on","newList","push","messageBox","scrollTop","scrollHeight","messageBlock","map","key","id","chat","NavBar","colors","require","sizes","ToolBar","colorBoxes","color","onClick","setPenColor","pointCircles","size","setLineWidth","width","height","penColor","clearCanvas","WhiteBoard","resizeCanvas","cw","d","offsetWidth","ch","offsetHeight","canvas","drawLine","ratio","ctx","x1","y1","x2","y2","beginPath","moveTo","lineTo","lineCap","strokeStyle","lineWidth","stroke","closePath","handleDraw","startX","startY","currentX","currentY","trackMouse","touches","pageX","offsetLeft","pageY","offsetTop","nativeEvent","offsetX","offsetY","startTrackMouse","button","drawing","setInterval","stopTrackMouse","clearInterval","getContext","clearRect","window","addEventListener","onMouseDown","onMouseLeave","onMouseUp","onMouseMove","onContextMenu","onTouchStart","onTouchCancel","onTouchEnd","onTouchMove","Layout","disconnect","initSocket","io","onbeforeunload","App","title","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.a05233ae.chunk.js","sourcesContent":["module.exports = {\r\n    GLOBAL_CHAT: \"GLOBAL_CHAT\",\r\n    USER_CONNECTED: \"USER_CONNECTED\",\r\n    MESSAGE_RECIEVED: \"MESSAGE_RECIEVED\",\r\n    MESSAGE_SENT: \"MESSAGE_SENT\",\r\n    USER_DISCONNECTED: \"USER_DISCONNECTED\",\r\n    TYPING: \"TYPING\",\r\n    VERIFY_USER: \"VERIFY_USER\",\r\n    LOGOUT: \"LOGOUT\",\r\n    LINEDRAWN: \"LINEDRAWN\",\r\n    SCREENCLEAR: \"SCREENCLEAR\",\r\n    LOG: \"LOG\"\r\n}","module.exports = ([\r\n    {\r\n        name: \"white\",\r\n        hex: \"#FFFFFF\"\r\n    },\r\n    {\r\n        name: \"silver\",\r\n        hex: \"#C0C0C0\"\r\n    },\r\n    {\r\n        name: \"gray\",\r\n        hex: \"#808080\"\r\n    },\r\n    {\r\n        name: \"black\",\r\n        hex: \"#000000\"\r\n    },\r\n    {\r\n        name: \"red\",\r\n        hex: \"#FF0000\"\r\n    },\r\n    {\r\n        name: \"maroon\",\r\n        hex: \"#800000\"\r\n    },\r\n    {\r\n        name: \"yellow\",\r\n        hex: \"#FFFF00\"\r\n    },\r\n    {\r\n        name: \"olive\",\r\n        hex: \"#808000\"\r\n    },\r\n    {\r\n        name: \"lime\",\r\n        hex: \"#00FF00\"\r\n    },\r\n    {\r\n        name: \"green\",\r\n        hex: \"#008000\"\r\n    },\r\n    {\r\n        name: \"aqua\",\r\n        hex: \"#00FFFF\"\r\n    },\r\n    {\r\n        name: \"teal\",\r\n        hex: \"#008080\"\r\n    },\r\n    {\r\n        name: \"blue\",\r\n        hex: \"#0000FF\"\r\n    },\r\n    {\r\n        name: \"navy\",\r\n        hex: \"#000080\"\r\n    },\r\n    {\r\n        name: \"fuchsia\",\r\n        hex: \"#FF00FF\"\r\n    },\r\n    {\r\n        name: \"purple\",\r\n        hex: \"#800080\"\r\n    }\r\n]);","import React, { Component }from 'react'\r\nimport { VERIFY_USER } from '../Events.js';\r\n\r\nclass Login extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.state = {\r\n            username: \"\",\r\n            error: \"\",\r\n        }\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n        this.setUser = this.setUser.bind(this);\r\n    }\r\n\r\n    setUser({user, isUser}){\r\n        if(isUser){\r\n            this.setError(\"Username is taken.\");\r\n        } else {\r\n            this.props.setUser(user);\r\n        }\r\n    }\r\n\r\n    //Replace with a window alert component later\r\n    setError(message){\r\n        this.setState({\r\n            error: message\r\n        });\r\n        console.log(message);\r\n    }\r\n\r\n    handleChange(e){\r\n        const username = e.target.value\r\n        this.setState({\r\n            username: username\r\n        })\r\n    }\r\n\r\n    handleSubmit(e){\r\n        e.preventDefault();\r\n        const socket = this.props.socket;\r\n\r\n        socket.emit(VERIFY_USER, this.state.username, this.setUser);\r\n        console.log(VERIFY_USER, this.state.username);\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"loginForm\">\r\n                <form onSubmit = {this.handleSubmit}>\r\n                    <label className=\"loginText\">Enter Username</label>\r\n                    <input\r\n                    type = \"text\"\r\n                    value = {this.state.username}\r\n                    placeholder = \"Username\"\r\n                    onChange = {this.handleChange}\r\n                    className=\"loginUser\"\r\n\r\n                    />\r\n                    <input\r\n                    type = \"submit\"\r\n                    value = \"Login\"\r\n                    className=\"loginSubmit\"\r\n                    />\r\n                </form>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Login","import React, { Component } from 'react'\r\n\r\nclass MessageInput extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.state = {\r\n            message: \"\",\r\n        }\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n    }\r\n\r\n    //Need chat.name\r\n    //Need sendMessage\r\n\r\n    handleChange(e){\r\n        const message = e.target.value;\r\n        this.setState({\r\n            message: message\r\n        });\r\n    }\r\n\r\n    handleSubmit(e){\r\n        e.preventDefault();\r\n        const message = this.state.message;\r\n        if(message !== \"\"){\r\n            this.props.sendMessage(message);\r\n            this.setState({\r\n                message: \"\"\r\n            });\r\n        }\r\n\r\n        this.input.focus();\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <form onSubmit={this.handleSubmit}> \r\n                    <input className=\"messageInput\"\r\n                        type = \"text\" \r\n                        value = {this.state.message} \r\n                        placeholder = \"Type here to chat!\" \r\n                        onChange = {this.handleChange}\r\n                        ref={(ele) => this.input = ele}\r\n                    />\r\n                    <input \r\n                        type = \"submit\" \r\n                        value = \"Send\"\r\n                        className=\"messageSend\"\r\n                        />\r\n                </form>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default MessageInput","import React, { Component } from 'react'\r\n\r\nclass MessageBox extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.state = {\r\n            \r\n        }\r\n    }\r\n    //Need messages\r\n\r\n    render() {\r\n        let highlight = this.props.message.includes(\"@\"+this.props.user.name)\r\n\r\n        return (\r\n        <div style={{backgroundColor: highlight ? \"rgb(25, 9, 42)\" : \"none\"}}>\r\n                {/* <hr className=\"messageBreak\"/> */}\r\n                <span className=\"username\">\r\n                    {this.props.sender.name}\r\n                </span>\r\n                <span className=\"message\">\r\n                    {\": \" + this.props.message}\r\n                </span>\r\n                \r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default MessageBox","import React, { Component } from 'react'\r\n\r\nclass ServerMessage extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.state = {\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"serverMessage\">\r\n                {this.props.message}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ServerMessage","import React, { Component } from 'react'\r\nimport MessageInput from './MessageInput.js'\r\nimport { MESSAGE_SENT, MESSAGE_RECIEVED } from '../Events.js'\r\nimport MessageBox from './MessageBox.js'\r\nimport ServerMessage from './ServerMessage.js';\r\n\r\nclass ChatContainer extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.state = {\r\n            chatMessages: []\r\n        }\r\n        this.sendMessage = this.sendMessage.bind(this);\r\n        this.addMessage = this.addMessage.bind(this);\r\n    }\r\n    \r\n    componentDidMount(){\r\n        this.addMessage();\r\n    }\r\n\r\n    componentDidUpdate(){\r\n        this.autoScr()\r\n    }\r\n    \r\n\r\n    //Send Message\r\n    sendMessage(message){\r\n        const socket = this.props.socket;\r\n        const user = this.props.user;\r\n        socket.emit(MESSAGE_SENT, message, user);\r\n        // console.log(MESSAGE_SENT, \" : \", message);\r\n    }\r\n\r\n    //Recieve Message\r\n    addMessage(){\r\n        const socket = this.props.socket;\r\n        socket.on(MESSAGE_RECIEVED, (message) =>{\r\n            const newList = this.state.chatMessages\r\n            newList.push(message);\r\n            this.setState({\r\n                chatMessages: newList\r\n            })\r\n            // console.log(this.state.chatMessages)\r\n        });\r\n    }\r\n\r\n    //Change scroll \r\n    autoScr(){\r\n        this.messageBox.scrollTop = this.messageBox.scrollHeight\r\n    }\r\n\r\n\r\n    render() {\r\n        const messageBlock = this.state.chatMessages.map(message => (\r\n            message.sender.name === 'server' ?\r\n            <ServerMessage\r\n                key = {message.id}\r\n                message = {message.message}\r\n            /> :\r\n            <MessageBox\r\n                key = {message.id}\r\n                message = {message.message}\r\n                sender = {message.sender}\r\n                user = {this.props.user}\r\n            /> \r\n\r\n\r\n        ));\r\n\r\n\r\n        return (\r\n            <div>\r\n                <MessageInput\r\n                    chat = {this.state}\r\n                    sendMessage = {this.sendMessage}\r\n                />\r\n                <div className=\"messageBox\" ref={(ele) => this.messageBox = ele}>\r\n                    {messageBlock}\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ChatContainer","import React, { Component } from 'react'\r\n\r\nclass NavBar extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.state = {\r\n            \r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"navBar\">\r\n\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default NavBar","import React, { Component } from 'react'\r\nconst colors = require(\"../colors.js\")\r\nconst sizes = [2,5,10,15];\r\n\r\nclass ToolBar extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.state = {\r\n            \r\n        }\r\n    }\r\n\r\n    render() {\r\n        const colorBoxes = colors.map(color => (\r\n            <div\r\n                key={color.hex}\r\n                className=\"colorBox\" \r\n                style={{backgroundColor: color.hex}}\r\n                onClick={() => this.props.setPenColor(color.hex)}\r\n            />\r\n        ))\r\n\r\n        const pointCircles = sizes.map(size => (\r\n            <span className=\"outerDot\" onClick={() => this.props.setLineWidth(size)}>\r\n                <span \r\n                    className=\"innerDot\"\r\n                    style={{width: size, height: size}}\r\n                    key={size}\r\n                />\r\n            </span>\r\n        ))\r\n\r\n        return (\r\n            <div className=\"toolBar\">\r\n                <div className=\"currentColor\" style={{backgroundColor: this.props.penColor}}/>\r\n                <div className=\"colorGrid\">\r\n                    {colorBoxes}\r\n                </div>\r\n                {pointCircles}\r\n                <div\r\n                    className=\"colorClear\" \r\n                    onClick={this.props.clearCanvas}\r\n                >Clear</div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ToolBar","import React, { Component } from 'react'\r\nimport ToolBar from './ToolBar.js';\r\nconst { LINEDRAWN, SCREENCLEAR, LOG } = require(\"../Events.js\")\r\n\r\n\r\nclass WhiteBoard extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.state = {\r\n            penColor: \"#000000\",\r\n            lineWidth: 2,\r\n        }\r\n    }\r\n\r\n    componentDidMount(){\r\n        // Set canavs context\r\n        this.ctx = this.canvas.getContext(\"2d\")\r\n\r\n        // Get size from parent div\r\n        const cw = this.d.offsetWidth;\r\n        const ch = this.d.offsetHeight;\r\n\r\n        // Set canvas attribute size\r\n        this.canvas.width = cw\r\n        this.canvas.height = ch\r\n\r\n        // Set canvas styles size\r\n        this.canvas.style.width = cw + \"px\"\r\n        this.canvas.style.height = ch + \"px\"\r\n        \r\n        const socket = this.props.socket\r\n        socket.on(LINEDRAWN, this.drawLine)\r\n\r\n        socket.on(SCREENCLEAR, () => {\r\n            this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height)\r\n        })\r\n        window.addEventListener(\"resize\", this.resizeCanvas, false)\r\n\r\n    }\r\n\r\n    // Canvas size needs to be updated\r\n    resizeCanvas = () => {\r\n        // Todo: Try taking a snapshot of the canvas and resize to new canvas\r\n\r\n        // Get new size from resized parent div\r\n        const cw = this.d.offsetWidth;\r\n        const ch = this.d.offsetHeight;\r\n\r\n        // Set canvas attributes to new size\r\n        this.canvas.width = cw;\r\n        this.canvas.height = ch;\r\n        \r\n        // Set canvas styles to new size\r\n        this.canvas.style.width = cw + \"px\";\r\n        this.canvas.style.height = ch + \"px\";\r\n    }\r\n\r\n    // Draw Line\r\n    drawLine = (ratio) => {\r\n        const ctx = this.ctx;\r\n\r\n        const cw = this.canvas.width;\r\n        const ch = this.canvas.height;\r\n\r\n        const x1 = ratio.x1 * cw;\r\n        const y1 = ratio.y1 * ch;\r\n        const x2 = ratio.x2 * cw;\r\n        const y2 = ratio.y2 * ch;\r\n\r\n        ctx.beginPath();\r\n        ctx.moveTo(x1,y1);\r\n        ctx.lineTo(x2,y2);\r\n        ctx.lineCap = \"round\";\r\n        ctx.strokeStyle = ratio.penColor;\r\n        ctx.lineWidth = ratio.lineWidth;\r\n        ctx.stroke();\r\n        ctx.closePath();\r\n    }\r\n\r\n    handleDraw = () => {\r\n        const socket = this.props.socket;\r\n\r\n        const cw = this.canvas.width;\r\n        const ch = this.canvas.height;\r\n\r\n        const ratio = {\r\n            x1: this.startX/cw,\r\n            y1: this.startY/ch,\r\n            x2: this.currentX/cw,\r\n            y2: this.currentY/ch,\r\n            penColor: this.state.penColor,\r\n            lineWidth: this.state.lineWidth\r\n        };\r\n        this.startX = this.currentX;\r\n        this.startY = this.currentY;\r\n        socket.emit(LINEDRAWN, ratio);\r\n    }\r\n\r\n    // Track Mouse Movement\r\n    trackMouse = (e) => {\r\n        // Used nativeEvent because some mouse events don't return offset\r\n        // const socket = this.props.socket;\r\n        if(e.type === \"touchmove\"){\r\n            this.currentX = e.touches[0].pageX - e.touches[0].target.offsetLeft;\r\n            this.currentY = e.touches[0].pageY - e.touches[0].target.offsetTop;\r\n            // socket.emit(LOG, e.touches[0].pageX - e.touches[0].target.offsetLeft)\r\n            // socket.emit(LOG, e.touches[0].pageY - e.touches[0].target.offsetTop)\r\n        } else {\r\n            this.currentX = e.nativeEvent.offsetX;\r\n            this.currentY = e.nativeEvent.offsetY;\r\n        }\r\n        \r\n    }\r\n\r\n    // Starts the drawing process\r\n    startTrackMouse = (e) => {\r\n        // const socket = this.props.socket;\r\n        // socket.emit(LOG, e.type)\r\n        if(e.button === 0 || e.type === \"touchstart\"){\r\n            this.startX = this.currentX;\r\n            this.startY = this.currentY;\r\n            this.drawing = setInterval(this.handleDraw, 20);\r\n        }\r\n    }\r\n\r\n    // Stops the drawing process\r\n    stopTrackMouse = () => {\r\n        clearInterval(this.drawing);\r\n    }\r\n\r\n    // Set Pen Color\r\n    setPenColor = (color) => {\r\n        console.log(color)\r\n        this.setState({\r\n            penColor: color\r\n        });\r\n    }\r\n\r\n    // Set Line Width\r\n    setLineWidth = (width) => {\r\n        this.setState({\r\n            lineWidth: width\r\n        });\r\n    }\r\n\r\n    clearCanvas = () => {\r\n        const socket = this.props.socket;\r\n        socket.emit(SCREENCLEAR, this.props.user)\r\n    }\r\n\r\n    render() {\r\n        const penColor = this.state.penColor\r\n        return (\r\n            <div>\r\n                <div className=\"whiteBoard\" ref={(ele) => this.d = ele}>\r\n                    <canvas \r\n                        ref={(ele) => this.canvas = ele}\r\n                        onMouseDown={this.startTrackMouse}\r\n                        onMouseLeave={this.stopTrackMouse}\r\n                        onMouseUp={this.stopTrackMouse}\r\n                        onMouseMove={this.trackMouse}\r\n                        onContextMenu={(e) => {e.preventDefault()}}\r\n\r\n                        onTouchStart={this.startTrackMouse}\r\n                        onTouchCancel={this.stopTrackMouse}\r\n                        onTouchEnd={this.stopTrackMouse}\r\n                        onTouchMove={this.trackMouse}\r\n                    > </canvas>\r\n                </div>\r\n                <ToolBar penColor = { penColor } setPenColor = {this.setPenColor} setLineWidth = {this.setLineWidth} clearCanvas = {this.clearCanvas}/>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default WhiteBoard","import React, { Component } from 'react'\r\nimport io from 'socket.io-client'\r\nimport { USER_CONNECTED, USER_DISCONNECTED } from '../Events.js'\r\nimport Login from \"./Login.js\"\r\nimport ChatContainer from './ChatContainer.js'\r\nimport NavBar from './NavBar.js';\r\nimport WhiteBoard from './WhiteBoard.js';\r\n\r\nconst socketUrl = \"/\"\r\n// const socketUrl = \"http://192.168.0.13:3001\"\r\n\r\nclass Layout extends Component {\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.state = {\r\n            socket: null,\r\n            user: null,\r\n        };\r\n    }\r\n\r\n    //Initialises socket\r\n    componentDidMount() {\r\n        this.initSocket()\r\n\r\n        // Before tab close\r\n        window.onbeforeunload = this.disconnect\r\n    }\r\n\r\n    disconnect = () => {\r\n        const socket = this.state.socket;\r\n        if(this.state.user !== null){\r\n            socket.emit(USER_DISCONNECTED, (this.state.user))\r\n        }\r\n    }\r\n\r\n\r\n    //Create a socket connection with server\r\n    initSocket = () => {\r\n        const socket = io(socketUrl)\r\n        \r\n        socket.on(\"connect\", () => {\r\n            console.log(\"Connected\")\r\n        })\r\n        this.setState({socket: socket})\r\n    }\r\n\r\n    //Set User\r\n    setUser = (user) => {\r\n        const socket = this.state.socket\r\n        \r\n        socket.emit(USER_CONNECTED, user)\r\n        console.log(USER_CONNECTED);\r\n        this.setState({\r\n            user: user\r\n        })\r\n    }\r\n\r\n    render() {\r\n        const user = this.state.user\r\n        const socket = this.state.socket\r\n        \r\n        return (\r\n            <div>\r\n                <NavBar />\r\n                {user ? \r\n                    <div>\r\n                        <WhiteBoard socket = {socket} user = {user}/>\r\n                        <ChatContainer socket = {socket} user = {user}/>\r\n                    </div> :\r\n                    <Login socket = {socket} setUser = {this.setUser}/>\r\n                }\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Layout","import React, { Component } from 'react'\nimport Layout from \"./components/Layout\"\n\nclass App extends Component {\n  render() {\n    return (\n      <Layout title = \"Chat App Title\"/>\n    )\n  }\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}