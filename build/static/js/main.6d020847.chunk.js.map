{"version":3,"sources":["Events.js","colors.js","components/Login.js","components/MessageInput.js","components/MessageBox.js","components/ServerMessage.js","components/ChatNav.js","components/ChatContainer.js","components/NavBar.js","components/ToolBar.js","components/WhiteBoard.js","components/Layout.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","GLOBAL_CHAT","USER_CONNECTED","MESSAGE_RECIEVED","MESSAGE_SENT","USER_DISCONNECTED","USER_CHANGE","VERIFY_USER","LOGOUT","LINEDRAWN","SCREENCLEAR","LOG","name","hex","Login","props","state","username","roomCode","error","handleChange","bind","handleSubmit","setUser","user","isUser","this","setError","message","setState","console","log","e","target","value","preventDefault","socket","emit","className","onSubmit","autoComplete","type","placeholder","onChange","Component","MessageInput","sendMessage","input","focus","ref","ele","MessageBox","highlight","includes","style","backgroundColor","sender","ServerMessage","ChatNav","toggle","classList","userCount","Object","keys","roomList","length","userList","map","key","onClick","viewerChev","viewerList","ChatContainer","chatMessages","addMessage","autoScr","on","newList","push","messageBox","scrollTop","scrollHeight","messageBlock","id","chat","NavBar","colors","require","sizes","ToolBar","colorBoxes","color","setPenColor","pointCircles","size","setLineWidth","borderColor","lineWidth","width","height","penColor","clearCanvas","WhiteBoard","resizeCanvas","cw","d","offsetWidth","ch","offsetHeight","canvas","drawLine","ratio","ctx","x1","y1","x2","y2","beginPath","moveTo","lineTo","lineCap","strokeStyle","stroke","closePath","handleDraw","startX","startY","currentX","currentY","trackMouse","touches","pageX","offsetLeft","pageY","offsetTop","nativeEvent","offsetX","offsetY","startTrackMouse","button","drawing","setInterval","stopTrackMouse","clearInterval","getContext","clearRect","window","addEventListener","onMouseDown","onMouseLeave","onMouseUp","onMouseMove","onContextMenu","onTouchStart","onTouchCancel","onTouchEnd","onTouchMove","Layout","initSocket","io","disconnect","onbeforeunload","App","title","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.6d020847.chunk.js","sourcesContent":["module.exports = {\r\n    GLOBAL_CHAT: \"GLOBAL_CHAT\",\r\n    USER_CONNECTED: \"USER_CONNECTED\",\r\n    MESSAGE_RECIEVED: \"MESSAGE_RECIEVED\",\r\n    MESSAGE_SENT: \"MESSAGE_SENT\",\r\n    USER_DISCONNECTED: \"USER_DISCONNECTED\",\r\n    USER_CHANGE: \"USER_CHANGE\",\r\n    VERIFY_USER: \"VERIFY_USER\",\r\n    LOGOUT: \"LOGOUT\",\r\n    LINEDRAWN: \"LINEDRAWN\",\r\n    SCREENCLEAR: \"SCREENCLEAR\",\r\n    LOG: \"LOG\"\r\n}","module.exports = ([\r\n    {\r\n        name: \"white\",\r\n        hex: \"#FFFFFF\"\r\n    },\r\n    // {\r\n    //     name: \"silver\",\r\n    //     hex: \"#C0C0C0\"\r\n    // },\r\n    {\r\n        name: \"gray\",\r\n        hex: \"#808080\"\r\n    },\r\n    {\r\n        name: \"black\",\r\n        hex: \"#000000\"\r\n    },\r\n    {\r\n        name: \"red\",\r\n        hex: \"#FF0000\"\r\n    },\r\n    {\r\n        name: \"brown\",\r\n        hex: \"#964B00\"\r\n    },\r\n    // {\r\n    //     name: \"maroon\",\r\n    //     hex: \"#800000\"\r\n    // },\r\n    {\r\n        name: \"yellow\",\r\n        hex: \"#FFFF00\"\r\n    },\r\n    // {\r\n    //     name: \"olive\",\r\n    //     hex: \"#808000\"\r\n    // },\r\n    // {\r\n    //     name: \"lime\",\r\n    //     hex: \"#00FF00\"\r\n    // },\r\n    {\r\n        name: \"green\",\r\n        hex: \"#008000\"\r\n    },\r\n    {\r\n        name: \"aqua\",\r\n        hex: \"#00FFFF\"\r\n    },\r\n    {\r\n        name: \"teal\",\r\n        hex: \"#008080\"\r\n    },\r\n    {\r\n        name: \"blue\",\r\n        hex: \"#0000FF\"\r\n    },\r\n    {\r\n        name: \"navy\",\r\n        hex: \"#000080\"\r\n    },\r\n    // {\r\n    //     name: \"fuchsia\",\r\n    //     hex: \"#FF00FF\"\r\n    // },\r\n    {\r\n        name: \"purple\",\r\n        hex: \"#800080\"\r\n    }\r\n]);","import React, { Component }from 'react'\r\nimport { VERIFY_USER } from '../Events.js';\r\n\r\nclass Login extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.state = {\r\n            username: \"\",\r\n            roomCode: \"\",\r\n            error: \"\",\r\n        }\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n        this.setUser = this.setUser.bind(this);\r\n    }\r\n\r\n    setUser({user, isUser, roomCode}){\r\n        if(isUser){\r\n            this.setError(\"Username is taken.\");\r\n        } else {\r\n            this.props.setUser(user, roomCode);\r\n        }\r\n    }\r\n\r\n    //Replace with a window alert component later\r\n    setError(message){\r\n        this.setState({\r\n            error: message\r\n        });\r\n        console.log(message);\r\n    }\r\n\r\n    handleChange(e){\r\n        const name = e.target.name\r\n        const value = e.target.value\r\n        this.setState({\r\n            [name]: value\r\n        })\r\n    }\r\n\r\n    handleSubmit(e){\r\n        e.preventDefault();\r\n        const socket = this.props.socket;\r\n\r\n        socket.emit(VERIFY_USER, this.state.username, this.state.roomCode, this.setUser);\r\n        console.log(VERIFY_USER, this.state.username);\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"loginForm\">\r\n                <form onSubmit = {this.handleSubmit} autoComplete = \"off\">\r\n                    <span>\r\n                        <label className=\"loginText\">Username: </label>\r\n                        <input\r\n                            type = \"text\"\r\n                            name = \"username\"\r\n                            value = {this.state.username}\r\n                            placeholder = \"Username\"\r\n                            onChange = {this.handleChange}\r\n                            className=\"loginField\"\r\n                        />\r\n                    </span>\r\n                    <span>\r\n                        <label className=\"loginText\">Room Code: </label>\r\n                        <input\r\n                            type = \"text\"\r\n                            name = \"roomCode\"\r\n                            value = {this.state.roomCode}\r\n                            placeholder = \"Room\"\r\n                            onChange = {this.handleChange}\r\n                            className=\"loginField\"\r\n                        />\r\n                    </span>\r\n                    \r\n                    <input\r\n                        type = \"submit\"\r\n                        value = \"Join!\"\r\n                        className=\"loginSubmit\"\r\n                        />\r\n                </form>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Login","import React, { Component } from 'react'\r\n\r\nclass MessageInput extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.state = {\r\n            message: \"\",\r\n        }\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n    }\r\n\r\n    //Need chat.name\r\n    //Need sendMessage\r\n\r\n    handleChange(e){\r\n        const message = e.target.value;\r\n        this.setState({\r\n            message: message\r\n        });\r\n    }\r\n\r\n    handleSubmit(e){\r\n        e.preventDefault();\r\n        const message = this.state.message;\r\n        if(message !== \"\"){\r\n            this.props.sendMessage(message);\r\n            this.setState({\r\n                message: \"\"\r\n            });\r\n        }\r\n\r\n        this.input.focus();\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <form onSubmit={this.handleSubmit}> \r\n                    <input className=\"messageInput\"\r\n                        type = \"text\" \r\n                        value = {this.state.message} \r\n                        placeholder = \"Type here to chat!\" \r\n                        onChange = {this.handleChange}\r\n                        ref={(ele) => this.input = ele}\r\n                    />\r\n                    <input \r\n                        type = \"submit\" \r\n                        value = \"Send\"\r\n                        className=\"messageSend\"\r\n                        />\r\n                </form>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default MessageInput","import React, { Component } from 'react'\r\n\r\nclass MessageBox extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.state = {\r\n            \r\n        }\r\n    }\r\n    //Need messages\r\n\r\n    render() {\r\n        let highlight = this.props.message.includes(\"@\"+this.props.user.name)\r\n\r\n        return (\r\n        <div\r\n            className=\"messageBox\"\r\n            style={{backgroundColor: highlight ? \"rgb(46, 1, 46)\" : \"none\"}}>\r\n                {/* <hr className=\"messageBreak\"/> */}\r\n                <span className=\"color\">\r\n                    {this.props.sender.name}\r\n                </span>\r\n                <span className=\"noColor\">\r\n                    {\": \" + this.props.message}\r\n                </span>\r\n                \r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default MessageBox","import React, { Component } from 'react'\r\n\r\nclass ServerMessage extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.state = {\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"serverMessage\">\r\n                {this.props.message}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ServerMessage","import React, { Component } from 'react'\r\n\r\nclass ChatNav extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.state = {\r\n            \r\n        }\r\n    }\r\n\r\n    toggle = (ele) => {\r\n        ele.classList.toggle(\"down\")\r\n    }\r\n\r\n    render() {\r\n\r\n        const userCount = Object.keys(this.props.roomList).length\r\n        const userList = Object.keys(this.props.roomList).map(user => (\r\n            <div key={user}>{user}</div>\r\n        ))\r\n\r\n        return (\r\n            <div className=\"chatNav\">\r\n                <span className=\"chatNavLeft\">\r\n                    <span className=\"color\">Room Code: </span> \r\n                    <span className=\"noColor\">{this.props.roomCode}</span>\r\n                </span>\r\n\r\n                <span className=\"chatNavRight\">\r\n                    <span className=\"color\">Users: </span>\r\n                    <span className=\"noColor\">{userCount}</span>\r\n                    <div\r\n                        onClick={() => {\r\n                            this.toggle(this.viewerChev)\r\n                            this.toggle(this.viewerList)\r\n                        }}\r\n                        className=\"chevronBorder\">\r\n                        <div>\r\n                            <i \r\n                                className=\"fas fa-chevron-left rotate\"\r\n                                ref={(ele) => {this.viewerChev = ele}}\r\n                            ></i>\r\n                        </div>\r\n                        <div className=\"userList\" ref={(ele) => this.viewerList = ele}> \r\n                            <div className=\"noColor\">Current Room Users:</div>\r\n                            {userList}\r\n                            </div>\r\n                    </div>\r\n                </span>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ChatNav","import React, { Component } from 'react'\r\nimport MessageInput from './MessageInput.js'\r\nimport { MESSAGE_SENT, MESSAGE_RECIEVED } from '../Events.js'\r\nimport MessageBox from './MessageBox.js'\r\nimport ServerMessage from './ServerMessage.js';\r\nimport ChatNav from './ChatNav.js';\r\n\r\nclass ChatContainer extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.state = {\r\n            chatMessages: []\r\n        }\r\n        this.sendMessage = this.sendMessage.bind(this);\r\n        this.addMessage = this.addMessage.bind(this);\r\n    }\r\n    \r\n    componentDidMount(){\r\n        this.addMessage();\r\n    }\r\n\r\n    componentDidUpdate(){\r\n        this.autoScr()\r\n    }\r\n    \r\n\r\n    //Send Message\r\n    sendMessage(message){\r\n        const socket = this.props.socket;\r\n        const user = this.props.user;\r\n        const roomCode = this.props.roomCode;\r\n        socket.emit(MESSAGE_SENT, message, user, roomCode);\r\n        // console.log(MESSAGE_SENT, \" : \", message);\r\n    }\r\n\r\n    //Recieve Message\r\n    addMessage(){\r\n        const socket = this.props.socket;\r\n        socket.on(MESSAGE_RECIEVED, (message) =>{\r\n            const newList = this.state.chatMessages\r\n            newList.push(message);\r\n            this.setState({\r\n                chatMessages: newList\r\n            })\r\n            // console.log(this.state.chatMessages)\r\n        });\r\n    }\r\n\r\n    //Change scroll \r\n    autoScr(){\r\n        this.messageBox.scrollTop = this.messageBox.scrollHeight\r\n    }\r\n\r\n\r\n    render() {\r\n        const messageBlock = this.state.chatMessages.map(message => (\r\n            message.sender.name === 'server' ?\r\n            <ServerMessage\r\n                key = {message.id}\r\n                message = {message.message}\r\n            /> :\r\n            <MessageBox\r\n                key = {message.id}\r\n                message = {message.message}\r\n                sender = {message.sender}\r\n                user = {this.props.user}\r\n            /> \r\n\r\n\r\n        ));\r\n\r\n\r\n        return (\r\n            <div>\r\n                <ChatNav roomCode = {this.props.roomCode} roomList = {this.props.roomList}/>\r\n                <MessageInput\r\n                    chat = {this.state}\r\n                    sendMessage = {this.sendMessage}\r\n                />\r\n                <div className=\"messageBlock\" ref={(ele) => this.messageBox = ele}>\r\n                    {messageBlock}\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ChatContainer","import React, { Component } from 'react'\r\n\r\nclass NavBar extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.state = {\r\n            \r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"navBar\">\r\n                Drabble\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default NavBar","import React, { Component } from 'react'\r\nconst colors = require(\"../colors.js\")\r\nconst sizes = [2,4,6,10,16];\r\n\r\nclass ToolBar extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.state = {\r\n            \r\n        }\r\n    }\r\n\r\n    render() {\r\n        const colorBoxes = colors.map(color => (\r\n            <div\r\n                key={color.hex}\r\n                className=\"colorBox\" \r\n                style={{backgroundColor: color.hex}}\r\n                onClick={() => this.props.setPenColor(color.hex)}\r\n            />\r\n        ))\r\n\r\n        const pointCircles = sizes.map(size => (\r\n            <span \r\n                className=\"outerDot\" onClick={() => this.props.setLineWidth(size)}\r\n                style={{borderColor: size === this.props.lineWidth ? \"purple\" : \"\"}}\r\n                key={size}>\r\n                <span \r\n                    className=\"innerDot\"\r\n                    style={{width: size, height: size}}\r\n                />\r\n            </span>\r\n        ))\r\n\r\n        return (\r\n            <div className=\"toolBar\">\r\n                <input\r\n                    className=\"currentColor\"\r\n                    type=\"color\"\r\n                    value={this.props.penColor}\r\n                    onChange={(e) => { this.props.setPenColor(e.target.value)}}\r\n                ></input>\r\n                <div className=\"colorGrid\">\r\n                    {colorBoxes}\r\n                </div>\r\n                {pointCircles}\r\n                <div\r\n                    className=\"colorClear\" \r\n                    onClick={this.props.clearCanvas}\r\n                >Clear</div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ToolBar","import React, { Component } from 'react'\r\nimport ToolBar from './ToolBar.js';\r\nconst { LINEDRAWN, SCREENCLEAR } = require(\"../Events.js\")\r\n\r\n\r\nclass WhiteBoard extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.state = {\r\n            penColor: \"#000000\",\r\n            lineWidth: 2,\r\n        }\r\n    }\r\n\r\n    componentDidMount(){\r\n        // Set canavs context\r\n        this.ctx = this.canvas.getContext(\"2d\")\r\n\r\n        // Get size from parent div\r\n        const cw = this.d.offsetWidth;\r\n        const ch = this.d.offsetHeight;\r\n\r\n        // Set canvas attribute size\r\n        this.canvas.width = cw\r\n        this.canvas.height = ch\r\n\r\n        // Set canvas styles size\r\n        this.canvas.style.width = cw + \"px\"\r\n        this.canvas.style.height = ch + \"px\"\r\n        \r\n        const socket = this.props.socket\r\n        socket.on(LINEDRAWN, this.drawLine)\r\n\r\n        socket.on(SCREENCLEAR, () => {\r\n            this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height)\r\n        })\r\n        window.addEventListener(\"resize\", this.resizeCanvas, false)\r\n\r\n    }\r\n\r\n    // Canvas size needs to be updated\r\n    resizeCanvas = () => {\r\n        // Todo: Try taking a snapshot of the canvas and resize to new canvas\r\n\r\n        // Get new size from resized parent div\r\n        const cw = this.d.offsetWidth;\r\n        const ch = this.d.offsetHeight;\r\n\r\n        // Set canvas attributes to new size\r\n        this.canvas.width = cw;\r\n        this.canvas.height = ch;\r\n        \r\n        // Set canvas styles to new size\r\n        this.canvas.style.width = cw + \"px\";\r\n        this.canvas.style.height = ch + \"px\";\r\n    }\r\n\r\n    // Draw Line\r\n    drawLine = (ratio) => {\r\n        const ctx = this.ctx;\r\n\r\n        const cw = this.canvas.width;\r\n        const ch = this.canvas.height;\r\n\r\n        const x1 = ratio.x1 * cw;\r\n        const y1 = ratio.y1 * ch;\r\n        const x2 = ratio.x2 * cw;\r\n        const y2 = ratio.y2 * ch;\r\n\r\n        ctx.beginPath();\r\n        ctx.moveTo(x1,y1);\r\n        ctx.lineTo(x2,y2);\r\n        ctx.lineCap = \"round\";\r\n        ctx.strokeStyle = ratio.penColor;\r\n        ctx.lineWidth = ratio.lineWidth;\r\n        ctx.stroke();\r\n        ctx.closePath();\r\n    }\r\n\r\n    handleDraw = () => {\r\n        const socket = this.props.socket;\r\n        const roomCode = this.props.roomCode;\r\n\r\n        const cw = this.canvas.width;\r\n        const ch = this.canvas.height;\r\n\r\n        const ratio = {\r\n            x1: this.startX/cw,\r\n            y1: this.startY/ch,\r\n            x2: this.currentX/cw,\r\n            y2: this.currentY/ch,\r\n            penColor: this.state.penColor,\r\n            lineWidth: this.state.lineWidth\r\n        };\r\n        this.startX = this.currentX;\r\n        this.startY = this.currentY;\r\n        socket.emit(LINEDRAWN, ratio, roomCode);\r\n    }\r\n\r\n    // Track Mouse Movement\r\n    trackMouse = (e) => {\r\n        // Used nativeEvent because some mouse events don't return offset\r\n        // const socket = this.props.socket;\r\n        if(e.type === \"touchmove\"){\r\n            this.currentX = e.touches[0].pageX - e.touches[0].target.offsetLeft;\r\n            this.currentY = e.touches[0].pageY - e.touches[0].target.offsetTop;\r\n            // socket.emit(LOG, e.touches[0].pageX - e.touches[0].target.offsetLeft)\r\n            // socket.emit(LOG, e.touches[0].pageY - e.touches[0].target.offsetTop)\r\n        } else {\r\n            this.currentX = e.nativeEvent.offsetX;\r\n            this.currentY = e.nativeEvent.offsetY;\r\n        }\r\n        \r\n    }\r\n\r\n    // Starts the drawing process\r\n    startTrackMouse = (e) => {\r\n        // const socket = this.props.socket;\r\n        // socket.emit(LOG, e.type)\r\n        if(e.button === 0 || e.type === \"touchstart\"){\r\n            this.startX = this.currentX;\r\n            this.startY = this.currentY;\r\n            this.drawing = setInterval(this.handleDraw, 20);\r\n        }\r\n    }\r\n\r\n    // Stops the drawing process\r\n    stopTrackMouse = () => {\r\n        clearInterval(this.drawing);\r\n    }\r\n\r\n    // Set Pen Color\r\n    setPenColor = (color) => {\r\n        this.setState({\r\n            penColor: color\r\n        });\r\n    }\r\n\r\n    // Set Line Width\r\n    setLineWidth = (width) => {\r\n        this.setState({\r\n            lineWidth: width\r\n        });\r\n    }\r\n\r\n    clearCanvas = () => {\r\n        const socket = this.props.socket;\r\n        const roomCode = this.props.roomCode\r\n        socket.emit(SCREENCLEAR, this.props.user, roomCode)\r\n    }\r\n\r\n    render() {\r\n        const penColor = this.state.penColor\r\n        const lineWidth = this.state.lineWidth\r\n\r\n        return (\r\n            <div>\r\n                <div className=\"whiteBoard\" ref={(ele) => this.d = ele}>\r\n                    <canvas \r\n                        ref={(ele) => this.canvas = ele}\r\n                        onMouseDown={this.startTrackMouse}\r\n                        onMouseLeave={this.stopTrackMouse}\r\n                        onMouseUp={this.stopTrackMouse}\r\n                        onMouseMove={this.trackMouse}\r\n                        onContextMenu={(e) => {e.preventDefault()}}\r\n\r\n                        onTouchStart={this.startTrackMouse}\r\n                        onTouchCancel={this.stopTrackMouse}\r\n                        onTouchEnd={this.stopTrackMouse}\r\n                        onTouchMove={this.trackMouse}\r\n                    > </canvas>\r\n                </div>\r\n                <ToolBar penColor = { penColor } setPenColor = {this.setPenColor} lineWidth = {lineWidth} setLineWidth = {this.setLineWidth} clearCanvas = {this.clearCanvas}/>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default WhiteBoard","import React, { Component } from 'react'\r\nimport io from 'socket.io-client'\r\nimport { USER_CONNECTED, USER_DISCONNECTED, USER_CHANGE } from '../Events.js'\r\nimport Login from \"./Login.js\"\r\nimport ChatContainer from './ChatContainer.js'\r\nimport NavBar from './NavBar.js';\r\nimport WhiteBoard from './WhiteBoard.js';\r\n\r\nconst socketUrl = \"/\"\r\n// const socketUrl = \"http://192.168.0.13:3001\"\r\n\r\nclass Layout extends Component {\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.state = {\r\n            socket: null,\r\n            user: null,\r\n            roomCode: null,\r\n            roomList: [],\r\n        };\r\n    }\r\n\r\n    //Initialises socket\r\n    componentDidMount() {\r\n        this.initSocket()\r\n\r\n        // Before tab close\r\n        window.onbeforeunload = this.disconnect\r\n    }\r\n\r\n    //Create a socket connection with server\r\n    initSocket = () => {\r\n        const socket = io(socketUrl)\r\n        \r\n        socket.on(\"connect\", () => {\r\n            console.log(\"Connected\")\r\n        })\r\n        this.setState({socket: socket})\r\n\r\n        socket.on(USER_CHANGE, (roomList) => {\r\n            this.setState({\r\n                roomList: roomList\r\n            })\r\n        })\r\n    }\r\n\r\n\r\n    disconnect = () => {\r\n        const socket = this.state.socket;\r\n        if(this.state.user !== null){\r\n            socket.emit(USER_DISCONNECTED, this.state.user, this.state.roomCode)\r\n        }\r\n    }\r\n\r\n    //Set User\r\n    setUser = (user, roomCode) => {\r\n        const socket = this.state.socket\r\n        \r\n        socket.emit(USER_CONNECTED, user, roomCode)\r\n        console.log(USER_CONNECTED);\r\n        this.setState({\r\n            user: user,\r\n            roomCode: roomCode\r\n        })\r\n    }\r\n\r\n    render() {\r\n        const user = this.state.user\r\n        const socket = this.state.socket\r\n        const roomCode = this.state.roomCode\r\n        const roomList = this.state.roomList\r\n        \r\n        return (\r\n            <div>\r\n                <NavBar roomCode = {roomCode} />\r\n                {user ? \r\n                    <div>\r\n                        <WhiteBoard socket = {socket} user = {user} roomCode = {roomCode}/>\r\n                        <ChatContainer socket = {socket} user = {user} roomCode = {roomCode} roomList = {roomList}/>\r\n                    </div> :\r\n                    <Login socket = {socket} setUser = {this.setUser}/>\r\n                }\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Layout","import React, { Component } from 'react'\nimport Layout from \"./components/Layout\"\n\nclass App extends Component {\n  render() {\n    return (\n      <Layout title = \"Chat App Title\"/>\n    )\n  }\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}