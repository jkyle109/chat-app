{"version":3,"sources":["Events.js","components/Login.js","components/MessageInput.js","components/MessageBox.js","components/ChatContainer.js","components/Layout.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","GLOBAL_CHAT","USER_CONNECTED","MESSAGE_RECIEVED","MESSAGE_SENT","USER_DISCONNECTED","TYPING","VERIFY_USER","LOGOUT","Login","props","state","username","error","handleChange","bind","handleSubmit","setUser","user","isUser","this","setError","message","setState","console","log","e","target","value","preventDefault","socket","emit","onSubmit","type","placeholder","onChange","Component","MessageInput","sendMessage","input","focus","className","ref","ele","MessageBox","sender","name","ChatContainer","chatMessages","addMessage","autoScr","on","newList","push","messageBox","scrollTop","scrollHeight","messageBlock","map","key","id","chat","Layout","initSocket","io","title","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.42753cb2.chunk.js","sourcesContent":["module.exports = {\r\n    GLOBAL_CHAT: \"GLOBAL_CHAT\",\r\n    USER_CONNECTED: \"USER_CONNECTED\",\r\n    MESSAGE_RECIEVED: \"MESSAGE_RECIEVED\",\r\n    MESSAGE_SENT: \"MESSAGE_SENT\",\r\n    USER_DISCONNECTED: \"USER_DISCONNECTED\",\r\n    TYPING: \"TYPING\",\r\n    VERIFY_USER: \"VERIFY_USER\",\r\n    LOGOUT: \"LOGOUT\"\r\n}","import React, { Component }from 'react'\r\nimport { VERIFY_USER } from '../Events.js';\r\n\r\nclass Login extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.state = {\r\n            username: \"\",\r\n            error: \"\",\r\n        }\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n        this.setUser = this.setUser.bind(this);\r\n    }\r\n\r\n    setUser({user, isUser}){\r\n        if(isUser){\r\n            this.setError(\"Username is taken.\");\r\n        } else {\r\n            this.props.setUser(user);\r\n        }\r\n    }\r\n\r\n    //Replace with a window alert component later\r\n    setError(message){\r\n        this.setState({\r\n            error: message\r\n        });\r\n        console.log(message);\r\n    }\r\n\r\n    handleChange(e){\r\n        const username = e.target.value\r\n        this.setState({\r\n            username: username\r\n        })\r\n    }\r\n\r\n    handleSubmit(e){\r\n        e.preventDefault();\r\n        const socket = this.props.socket;\r\n\r\n        socket.emit(VERIFY_USER, this.state.username, this.setUser);\r\n        console.log(VERIFY_USER, this.state.username);\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <form onSubmit = {this.handleSubmit}>\r\n                    <label>Enter Username: </label>\r\n                    <input\r\n                    type = \"text\"\r\n                    value = {this.state.username}\r\n                    placeholder = \"Username\"\r\n                    onChange = {this.handleChange}\r\n\r\n                    />\r\n                    <input\r\n                    type = \"submit\"\r\n                    value = \"Login\"\r\n                    />\r\n                </form>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Login","import React, { Component } from 'react'\r\n\r\nclass MessageInput extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.state = {\r\n            message: \"\",\r\n        }\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n    }\r\n\r\n    //Need chat.name\r\n    //Need sendMessage\r\n\r\n    handleChange(e){\r\n        const message = e.target.value;\r\n        this.setState({\r\n            message: message\r\n        });\r\n    }\r\n\r\n    handleSubmit(e){\r\n        e.preventDefault();\r\n        const message = this.state.message;\r\n        if(message !== \"\"){\r\n            this.props.sendMessage(message);\r\n            this.setState({\r\n                message: \"\"\r\n            });\r\n        }\r\n\r\n        this.input.focus();\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <form onSubmit={this.handleSubmit}> \r\n                    <input className=\"messageInput\"\r\n                        type = \"text\" \r\n                        value = {this.state.message} \r\n                        placeholder = \"Type here to chat!\" \r\n                        onChange = {this.handleChange}\r\n                        ref={(ele) => this.input = ele}\r\n                    />\r\n                    <input \r\n                        type = \"submit\" \r\n                        value = \"Send\"\r\n                        className=\"messageSend\"\r\n                        />\r\n                </form>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default MessageInput","import React, { Component } from 'react'\r\n\r\nclass MessageBox extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.state = {\r\n            \r\n        }\r\n    }\r\n    //Need messages\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                {/* <hr className=\"messageBreak\"/> */}\r\n                <span className=\"username\">\r\n                    {this.props.sender.name}\r\n                </span>\r\n                <span className=\"message\">\r\n                    {\": \" + this.props.message}\r\n                </span>\r\n                \r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default MessageBox","import React, { Component } from 'react'\r\nimport MessageInput from './MessageInput.js'\r\nimport { MESSAGE_SENT, MESSAGE_RECIEVED } from '../Events.js'\r\nimport MessageBox from './MessageBox.js'\r\n\r\nclass ChatContainer extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        //socket\r\n        //user\r\n\r\n        this.state = {\r\n            chatMessages: []\r\n        }\r\n        this.sendMessage = this.sendMessage.bind(this);\r\n        this.addMessage = this.addMessage.bind(this);\r\n    }\r\n    \r\n    componentWillMount(){\r\n        this.addMessage();\r\n    }\r\n\r\n    componentDidUpdate(){\r\n        this.autoScr()\r\n    }\r\n    \r\n    //Chat Box with messages\r\n\r\n    //Chat input\r\n\r\n    //Typing indicator\r\n\r\n    //\r\n\r\n    //Send Message\r\n    sendMessage(message){\r\n        const socket = this.props.socket;\r\n        const user = this.props.user;\r\n        socket.emit(MESSAGE_SENT, message, user);\r\n        console.log(MESSAGE_SENT, \" : \", message);\r\n    }\r\n\r\n    //Recieve Message\r\n    addMessage(){\r\n        const socket = this.props.socket;\r\n        socket.on(MESSAGE_RECIEVED, (message) =>{\r\n            //console.log(MESSAGE_RECIEVED, \" : \", message);\r\n            const newList = this.state.chatMessages\r\n            newList.push(message);\r\n            this.setState({\r\n                chatMessages: newList\r\n            })\r\n        });\r\n    }\r\n\r\n\r\n    autoScr(){\r\n        this.messageBox.scrollTop = this.messageBox.scrollHeight\r\n    }\r\n\r\n\r\n    render() {\r\n        console.log(this.state.chatMessages)\r\n        const messageBlock = this.state.chatMessages.map(message => (\r\n            <MessageBox\r\n                key = {message.id}\r\n                message = {message.message}\r\n                sender = {message.sender}\r\n            />\r\n        ));\r\n\r\n\r\n        return (\r\n            <div>\r\n                <MessageInput\r\n                    chat = {this.state}\r\n                    sendMessage = {this.sendMessage}\r\n                />\r\n                <div className=\"messageBox\" ref={(ele) => this.messageBox = ele}>\r\n                    {messageBlock}\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ChatContainer","import React, { Component } from 'react'\r\nimport io from 'socket.io-client'\r\nimport { USER_CONNECTED, LOGOUT  } from '../Events.js'\r\nimport Login from \"./Login.js\"\r\nimport ChatContainer from './ChatContainer.js'\r\n\r\nconst socketUrl = \"/\"\r\n\r\nclass Layout extends Component {\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.state = {\r\n            socket: null,\r\n            user: null,\r\n        };\r\n\r\n        this.setUser = this.setUser.bind(this);\r\n    }\r\n\r\n    //Initialises socket\r\n    componentWillMount() {\r\n        this.initSocket()\r\n    }\r\n\r\n    //Leave page ???\r\n    componentWillUnmount() {\r\n        //const socket = this.state.socket;\r\n        //socket.emit(\"disconnect\", (this.user))\r\n    }\r\n\r\n    //Create a socket connection with server\r\n    initSocket(){\r\n        const socket = io(socketUrl)\r\n        \r\n        socket.on(\"connect\", () => {\r\n            console.log(\"Connected\")\r\n        })\r\n        this.setState({socket: socket})\r\n    }\r\n\r\n    //Set User\r\n    setUser(user){\r\n        const socket = this.state.socket\r\n        \r\n        socket.emit(USER_CONNECTED, user)\r\n        console.log(USER_CONNECTED);\r\n        this.setState({\r\n            user: user\r\n        })\r\n    }\r\n\r\n    //Logout\r\n    logout(){\r\n        const socket = this.state.socket;\r\n        const user = this.state.user;\r\n\r\n        //For future proofing check to see if user is logged in\r\n        if(user == null){\r\n            //Error message container???\r\n        } else {\r\n            socket.emit(LOGOUT, user)\r\n        }\r\n    }\r\n\r\n\r\n    render() {\r\n        const { title } = this.props\r\n        const user = this.state.user\r\n        const socket = this.state.socket\r\n        return (\r\n            <div>\r\n                {title}\r\n                {user ? \r\n                    <ChatContainer socket = {socket} user = {user}/> :\r\n                    <Login socket = {socket} setUser = {this.setUser}/>\r\n                }\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Layout","import React, { Component } from 'react'\nimport Layout from \"./components/Layout\"\n\nclass App extends Component {\n  render() {\n    return (\n      <Layout title = \"Chat App Title\"/>\n    )\n  }\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}